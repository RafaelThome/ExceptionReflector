<?xml version="1.0"?>
<configuration>


  <configSections>
    <section
      name="ExceptionReflectorSection"
      type="ExceptionReflector.Config.ExceptionReflectorConfigurationSection, ExceptionReflector"
      allowLocation="true" allowDefinition="Everywhere" allowExeDefinition="MachineToApplication"
      restartOnExternalChanges="true" requirePermission="false" 
    />
  </configSections>


  <!-- ToDo: Para próximas versões, incluir o Assembly que define a exception nessas configurações e fazer a carga dop tipo dinamicamente. Por enquanto, por falta de tempo, se o aplicativo não "conhecer" a exception, vai dar erro. O contorno para esses casos por enquanto, será referenciar o assembly que defina tal exception no projeto e recompilar... Testar colocar a string Value no formato "Namespace.TypeName, TypeAssembly" -->
  <ExceptionReflectorSection BypassOpCodeExceptions="false">

    <!-- Citadas pelo Fortify (Exceptions báscias que escondem muitas outras) -->
    <addForbidenExceptionType Value="System.Exception" />
    <addForbidenExceptionType Value="System.SystemException" />
    <addForbidenExceptionType Value="System.ApplicationException" />

    <!-- Exceptions que podem gerar problemas de segurança -->
    <addForbidenExceptionType Value="System.IO.InternalBufferOverflowException" />
    <!-- Poderia esconder ataques de buffer overflow se o código que disparou a exception permitir -->

    <!-- Exceptions estouradas pela CLR que não podem ser remediadas por código algum. -->
    <!-- A Microsoft recomenda que sejam capturadas para log pelo evento AppDomain.UnhandledException e finalizar o processo para previnir problemas piores. (Este projeto faz isso como exemplo. Ver Program.cs) -->
    <!-- Esses casos devem ser monitorados e resolvidos por intervenção humana. -->
    <addForbidenExceptionType Value="System.ExecutionEngineException" />
    <addForbidenExceptionType Value="System.OutOfMemoryException" />
    <addForbidenExceptionType Value="System.InsufficientMemoryException" />
    <addForbidenExceptionType Value="System.StackOverflowException" />
    <addForbidenExceptionType Value="System.BadImageFormatException" />
    <addForbidenExceptionType Value="System.EntryPointNotFoundException" />
    <addForbidenExceptionType Value="System.MissingFieldException" />
    <addForbidenExceptionType Value="System.MissingMemberException" />
    <addForbidenExceptionType Value="System.MissingMethodException" />
    <addForbidenExceptionType Value="System.NotSupportedException" />
    <addForbidenExceptionType Value="System.TypeLoadException" />
    <addForbidenExceptionType Value="System.TypeUnloadedException" />

    <!-- Checar onde essa exception está sendo tão disparada para ver se ignoro -->
    <!-- <addForbidenExceptionType Value="System.NotImplementedException" /> -->
    
    <!-- Pesquisar mais... Podem ser disparadas após uma violação? Devem ser tratadas? -->
    <!-- <addForbidenExceptionType Value="System.Security.AccessControl.PrivilegeNotHeldException" /> -->
    <!-- <addForbidenExceptionType Value="System.Security.Authentication.AuthenticationException" /> -->
    <!-- <addForbidenExceptionType Value="System.Security.Authentication.InvalidCredentialException" /> -->
    <!-- <addForbidenExceptionType Value="System.Security.Cryptography.CryptographicUnexpectedOperationException" /> -->
    <!-- <addForbidenExceptionType Value="System.Security.SecurityException" /> -->

  </ExceptionReflectorSection>


  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0,Profile=Client"/>
  </startup>


</configuration>
